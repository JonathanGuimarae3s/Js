const http = require("http");
const { parse } = require("path");
const url = require('url');
const routes = require("./routes");



const server = http.createServer((request, response) => {
    const parsedUrl = url.parse(request.url);
    console.log(parsedUrl);

    console.log(`Request method: ${request.method} | Endpoint: ${request.url} `);
    const route = routes.find((routeObj) => {
        // se o method e o endpoint forem iguais a algum valor da rota quer dizer que a rota existe
        routeObj.endpoint === request.url && routeObj.method === request.method
    })
    if (route) {
        // se a rota existir chamara a funÃ§Ã£o handler passando o request e response como parametro
        route.handler(request, response)
    } else {
        response.writeHead(404, { "Content-Type": "text/html" });

        response.end(`Cannot ${request.method} ${request.url}`);
    }
    /*
    response -> retorna o status do server
     writeHead(statusCode,header ) -> escrever no header 
     end(message)-> Mensagem  a ser retornada ao client
    */
});
/*
  .listen(port,callback)->evento que vai escutar o servidor, param fazer o
  upload
 
 */
server.listen(3000, () => {
    console.log("ğŸ”¥Server started at http://localhost:3000");
});
